{"remainingRequest":"/home/mohammad/Documents/Servicio/api-apply/node_modules/babel-loader/lib/index.js!/home/mohammad/Documents/Servicio/api-apply/src/store/modules/api.js","dependencies":[{"path":"/home/mohammad/Documents/Servicio/api-apply/src/store/modules/api.js","mtime":1629546759896},{"path":"/home/mohammad/Documents/Servicio/api-apply/node_modules/cache-loader/dist/cjs.js","mtime":1629358254824},{"path":"/home/mohammad/Documents/Servicio/api-apply/node_modules/babel-loader/lib/index.js","mtime":1629358255792}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/mohammad/Documents/Servicio/api-apply/src/store/modules/api.js"],"names":["axios","state","getters","mutations","actions","FETCH_ALL_CATEGORIES","payload","commit","reqApi","get","data","console","log","response","Promise","reject","FETCH_RANKING_LIST","FETCH_BTOKEN_LIST","FETCH_SERVER_LIST","FETCH_CATEGORY_DETAILS","FETCH_TAGS","FETCH_TAG_DETAILS","COUNTER","namespaced"],"mappings":"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","sourcesContent":["import axios from '@/axios'\n\nconst state = {}\nconst getters = {}\nconst mutations = {}\nconst actions = {\n  FETCH_ALL_CATEGORIES: async ({commit}, payload) => {\n    try {\n      let { data } = await axios.reqApi(\"/categories/list?token={{token}}\").get()\n      return data\n    } catch (e) {\n      console.log(\"Error-store-categories-actions-FETCH_ALL_CATEGORIES\", e.response.data)\n      return Promise.reject(e.response.data)\n    }\n  },\n  FETCH_RANKING_LIST: async ({commit}, payload) => {\n    try {\n      let { data } = await axios.reqApi(\"/ranking/list?token={{token}}\").get()\n      return data\n    } catch (e) {\n      console.log(\"Error-store-ranking-actions-FETCH_RANKING_LIST\", e.response.data)\n      return Promise.reject(e.response.data)\n    }\n  },\n  FETCH_BTOKEN_LIST: async ({commit}, payload) => {\n    try {\n      let { data } = await axios.reqApi(\"/btokens/list?token={{token}}\").get()\n      return data\n    } catch (e) {\n      console.log(\"Error-store-btokens-actions-FETCH_BTOKEN_LIST\", e.response.data)\n      return Promise.reject(e.response.data)\n    }\n  },\n  FETCH_SERVER_LIST: async ({commit}, payload) => {\n    try {\n      let { data } = await axios.reqApi(\"/rcps/list?token={{token}}\").get()\n      return data\n    } catch (e) {\n      console.log(\"Error-store-rcps-actions-FETCH_SERVER_LIST\", e.response.data)\n      return Promise.reject(e.response.data)\n    }\n  },\n  FETCH_CATEGORY_DETAILS: async ({commit}, payload) => {\n    try {\n      let { data } = await axios.reqApi(\"/projects/category/\"+ payload).get()\n      return data\n    } catch (e) {\n      console.log(\"Error-store-rcps-actions-FETCH_CATEGORY_DETAILS\", e.response.data)\n      return Promise.reject(e.response.data)\n    }\n  },\n  FETCH_TAGS: async ({commit}, payload) => {\n    try {\n      let { data } = await axios.reqApi(\"/tags/list?token={{token}}\").get()\n      return data\n    } catch (e) {\n      console.log(\"Error-store-rcps-actions-FETCH_TAGS\", e.response.data)\n      return Promise.reject(e.response.data)\n    }\n  },\n  FETCH_TAG_DETAILS: async ({commit}, payload) => {\n    try {\n      let { data } = await axios.reqApi(\"/projects/tag/\" + payload + \"?token={{token}}\").get()\n      return data\n    } catch (e) {\n      console.log(\"Error-store-rcps-actions-FETCH_CATEGORY_DETAILS\", e.response.data)\n      return Promise.reject(e.response.data)\n    }\n  },\n  COUNTER: async ({commit}, payload) => {\n    try {\n      let { data } = await axios.reqApi(\"/projects/counter/?token=x\").get()\n      return data\n    } catch (e) {\n      console.log(\"Error-store-rcps-actions-COUNTER\", e.response.data)\n      return Promise.reject(e.response.data)\n    }\n  },\n}\n\nexport default {\n  namespaced: true,\n  state, getters, mutations, actions\n}"]}]}